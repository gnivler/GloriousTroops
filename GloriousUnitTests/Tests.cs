using System;
using System.Collections.Generic;
using System.Linq;
using HarmonyLib;
using NUnit.Framework;
using SandBox;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.ModuleManager;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.Launcher.Library;
using TaleWorlds.ObjectSystem;
using GloriousTroops;
using Debug = TaleWorlds.Library.Debug;

// ReSharper disable InconsistentNaming
// ReSharper disable RedundantAssignment 
// ReSharper disable StringLiteralTypo
// ReSharper disable IdentifierTypo

namespace GloriousUnitTests
{
    [TestFixture]
    public class Tests
    {
        private static Harmony harmony = new Harmony("NUnit");
        private const string Path = @"M:\SteamLibrary\steamapps\common\Mount & Blade II Bannerlord\";
        private static Game Game;
        private static Campaign Campaign;
        private static string[] NativeModules = new[] { "Native", "Sandbox", "SandboxCore" };

        private static string[] Xmls = new[]
        {
            "SiegeEngines",
            "Monsters",
            "SkeletonScales",
            "ItemModifiers",
            "ItemModifierGroups",
            "CraftingPieces",
            "WeaponDescriptions",
            "CraftingTemplates",
            "BodyProperties",
            "SkillSets",
            "Items",
            "EquipmentRosters",
            "partyTemplates",
        };

        private static void DoStartup()
        {
            DoPatches();
            Common.PlatformFileHelper = new PlatformFileHelperPC("NUnit");
            Debug.DebugManager = new LauncherDebugManager();
            Campaign = new Campaign(CampaignGameMode.Campaign);
            Game = Game.CreateGame(Campaign, new SandBoxGameManager());
            Managed.Start(new List<IManagedComponent>());
            var coreManagedType = AccessTools.TypeByName("CoreManaged");
            var coreManaged = Activator.CreateInstance(coreManagedType);
            Traverse.Create(coreManaged).Method("OnInitialize").GetValue();
            Traverse.Create(Campaign).Property<Game>("CurrentGame").Value = Game;
            Traverse.Create(Campaign).Property<Campaign>("Current").Value = Campaign;
            LoadXml();
            BannerManager.Initialize();
            Game.Initialize();
            Game.Current.GetGameHandler<SandBoxManager>().InitializeSandboxXMLs(false);
            Traverse.Create(Campaign.CampaignObjectManager).Method("InitializeOnNewGame").GetValue();
        }

        private static void DoPatches()
        {
            harmony.Patch(AccessTools.Method(typeof(NativeConfig), "OnConfigChanged"),
                new HarmonyMethod(AccessTools.Method(typeof(Tests), nameof(FalsePrefix))));
            harmony.Patch(AccessTools.Method(typeof(ModuleHelper), "get__pathPrefix"),
                postfix: new HarmonyMethod(typeof(Tests), nameof(GetPathPostfix)));
            harmony.Patch(AccessTools.Method(typeof(ModuleHelper), "GetXsdPath"),
                postfix: new HarmonyMethod(typeof(Tests), nameof(GetXsdPathPostfix)));
            harmony.Patch(AccessTools.Method(typeof(Utilities), "SetLoadingScreenPercentage"),
                new HarmonyMethod(AccessTools.Method(typeof(Tests), nameof(FalsePrefix))));
            harmony.Patch(AccessTools.Method(typeof(NetworkMain), "Initialize"),
                new HarmonyMethod(typeof(Tests), nameof(FalsePrefix)));
            harmony.Patch(AccessTools.Method(typeof(Skeleton), "GetBoneIndexFromName"),
                new HarmonyMethod(typeof(Tests), nameof(FalsePrefix)));
            AssemblyLoader.LoadFrom("TaleWorlds.MountAndBlade.AutoGenerated.dll");
            var scriptingInterfaceOfIMBEditor = AccessTools.TypeByName("ScriptingInterfaceOfIMBEditor");
            harmony.Patch(AccessTools.Method(scriptingInterfaceOfIMBEditor, "IsEditMode"),
                new HarmonyMethod(typeof(Tests), nameof(FalsePrefix)));
        }

        private static bool FalsePrefix() => false;
        private static void GetPathPostfix(ref string __result) => __result = @$"{Path}\Modules\";
        private static void GetXsdPathPostfix(string xmlInfoId, ref string __result) => __result = @$"{Path}\XmlSchemas\{xmlInfoId}.xsd";

        private static void LoadXml()
        {
            foreach (var module in NativeModules)
            {
                XmlResource.GetXmlListAndApply(module);
                XmlResource.GetMbprojxmls(module);
            }

            foreach (var xml in Xmls)
                MBObjectManager.Instance.LoadXML(xml, true);
        }

        [Test]
        public void Test1_Startup()
        {
            DoStartup();
            Assert.NotNull(Game);
        }

        [Test]
        public void Test2_Upgrade()
        {
            var looterClan = Clan.BanditFactions.First();
            var party = BanditPartyComponent.CreateLooterParty("NUnit", looterClan, null, false);
            var troopRoster = TroopRoster.CreateDummyTroopRoster();
            Traverse.Create(party.Party).Property<TroopRoster>("MemberRoster").Value = troopRoster;
            var looter = CharacterObject.Find("looter");
            var aseraiHorse = MBObjectManager.Instance.GetObject<ItemObject>("aserai_horse");
            var sumpterHorse = MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse");
            var sword = MBObjectManager.Instance.GetObject<ItemObject>("vlandia_sword_4_t4");
            var itemRoster = new ItemRoster
            {
                new ItemRosterElement(aseraiHorse, 3),
                new ItemRosterElement(sumpterHorse, 4),
                new ItemRosterElement(sword, 2)
            };
            var originalItems = party.MemberRoster.GetTroopRoster().SelectMany(t => EquipmentUpgrading.ItemSlots(t.Character.Equipment));
            troopRoster.AddToCounts(looter, 1);
            Test3_Took1h(party.Party, itemRoster);
            Assert.Pass();
        }

        [Test]
        public void Test3_Took1h(PartyBase party, ItemRoster itemRoster)
        {
            EquipmentUpgrading.UpgradeEquipment(party, itemRoster);
            // Assert.GreaterOrEqual(//old 1h, new 1h);
        }
    }
}
